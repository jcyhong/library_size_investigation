show_plot(otu, df_sample, "sample_name", "sample_type", "TSS")
sample_df
sample_df["project_name"]
sample_df[["project_name"]]
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
print("0")
sample_df[[sample_id_col]]=colnames(otu)
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
show_plot(otu, df_sample, "sample_name", "sample_type", "TSS")
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
sample_df[[sample_id_col]]=colnames(otu)
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
show_plot(otu, df_sample, "sample_name", "sample_type", "TSS")
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
sample_df[sample_id_col]=colnames(otu)
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
show_plot(otu, df_sample, "sample_name", "sample_type", "TSS")
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
sample_df[sample_id_col]=colnames(otu)
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
show_plot(otu, df_sample, "sample_name", "sample_type", "TSS")
show_plot(otu, df_sample, "sample_name", "sample_type", "TSS")
show_plot(otu, df_sample, "sample_name", "sample_type", "GMPR")
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
sample_df[sample_id_col]=as.character(colnames(otu))
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
show_plot(otu, df_sample, "sample_name", "sample_type", "TSS")
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
sample_df[sample_id_col]=as.factor(colnames(otu))
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
show_plot(otu, df_sample, "sample_name", "sample_type", "TSS")
show_plot(otu, df_sample, "sample_name", "sample_type", "GMPR")
show_plot(otu, df_sample, "sample_name", "sample_type", "TSS")
show_plot(otu, df_sample, "sample_name", "sample_type", "GMPR")
show_plot(otu, df_sample, "sample_name", "sample_type", "TSS")
library(MicrobeDS)
library(dplyr)
library(ggplot2)
library(phyloseq)
library(RColorBrewer)
library("biomformat")
library(GMPR)
path_to_data <- "~/Documents/UC Berkeley/spring2020/Researches/librarysize/213_soil/47636_otu_table.biom"
data <- read_biom(path_to_data)
otu <- biom_data(data)
dim(otu) # 2223 taxa (rows) and 115 samples (cols)
df_sample <- read.table('~/Documents/UC Berkeley/spring2020/Researches/librarysize/213_soil/213_20180101-114722.txt', header=TRUE, sep='\t')
well_defined <- !grepl('BLANK', df_sample$sample_name)
df_sample <- df_sample %>% filter(well_defined)
# Exploration
lib_sizes <- Matrix::colSums(otu_table)
sample_df <- data.frame(sample_name=colnames(otu), lib_sizes=lib_sizes,
stringsAsFactors=F)
# Exploration
lib_sizes <- Matrix::colSums(otu)
sample_df <- data.frame(sample_name=colnames(otu), lib_sizes=lib_sizes,
stringsAsFactors=F)
colnames(otu)
df_sample
df_sample$sample_name
# Adapted from https://github.com/jchen1981/GMPR/blob/master/GMPR.R
GMPR<-function(OTUmatrix, min_ct=2, intersect_no=4){
#datatype check
if(!(class(OTUmatrix) %in% c("data.frame","matrix", "dgCMatrix")))
stop("Unknown datatype of object \"OTUmatrix\".")
rownames(OTUmatrix)->SampleName
if(ncol(OTUmatrix)<nrow(OTUmatrix))
warning("Sample size is larger than OTU number. Check if samples are arranged in columns.")
if(length(OTUmatrix[OTUmatrix<1 & OTUmatrix>0])>=0.1*ncol(OTUmatrix)*nrow(OTUmatrix))
stop("More than 10% values are fractional, please check.")
apply(OTUmatrix, MARGIN = 2, as.integer)->OTUmatrix
gmpr(OTUmatrix,min_ct,intersect_no)->size.factor
names(size.factor)<-SampleName
size.factor[abs(size.factor-1)<1e-10]<-NA
size.factor
}
get_lib_sizes <- function(otu_table, method = "TSS") {
if (method == "TSS") {
lib_sizes <- Matrix::colSums(otu_table)
} else if (method == "GMPR") {
lib_sizes <- GMPR(t(otu_table))
}
lib_sizes
}
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
sample_df[sample_id_col]=as.factor(colnames(otu))
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "GMPR")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "GMPR")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "GMPR")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "TSS")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "GMPR")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "TSS")
show_plot(otu, df_sample, "sample_name", "env_biome", "TSS")
show_plot(otu, df_sample, "sample_name", "env_biome", "GMPR")
show_plot(otu, df_sample, "sample_name", "env_biome", "TSS")
show_plot(otu, df_sample, "sample_name", "env_feature", "TSS")
show_plot(otu, df_sample, "sample_name", "env_feature", "GMPR")
show_plot(otu, df_sample, "sample_name", "env_feature", "TSS")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "TSS")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "GMPR")
# Exploration
lib_sizes <- Matrix::colSums(otu)
summary(lib_sizes)
sample_df[sample_df$lib_sizes < 10000]
sample_df[sample_df$lib_sizes <= 10000]
# Exploration
lib_sizes <- Matrix::colSums(otu)
summary(lib_sizes)
sample_df[,sample_df$lib_sizes <= 10000]
sample_df[sample_df$lib_sizes <= 10000,]
sample_df[sample_df$lib_sizes < 10000,]
sample_df <- sample_df[sample_df$lib_sizes < 10000,]
sample_df <- sample_df[sample_df$lib_sizes < 10000,]
sample_df %>%
group_by(sample_type) %>%
summarize(count=n(), mean=mean(lib_sizes), sd=sd(lib_sizes))
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "GMPR")
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
sample_df[sample_id_col]=as.factor(colnames(otu))
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
sample_df <- sample_df[sample_df$lib_sizes < 10000,]
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
sample_df[sample_id_col]=as.factor(colnames(otu))
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
sample_df <- sample_df[sample_df$lib_sizes < 10000,]
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
sample_df[sample_id_col]=as.factor(colnames(otu))
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
sample_df <- sample_df[sample_df$lib_sizes < 20000,]
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "GMPR")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "TSS")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "GMPR")
sample_df$lib_sizes
path_to_data <- "~/Documents/UC Berkeley/spring2020/Researches/librarysize/213_soil/47636_otu_table.biom"
data <- read_biom(path_to_data)
otu <- biom_data(data)
dim(otu) # 6099 taxa (rows) and 48 samples (cols)
df_sample <- read.table('~/Documents/UC Berkeley/spring2020/Researches/librarysize/213_soil/213_20180101-114722.txt', header=TRUE, sep='\t')
well_defined <- !grepl('BLANK', df_sample$sample_name)
df_sample <- df_sample %>% filter(well_defined)
# Exploration
lib_sizes <- Matrix::colSums(otu)
colSums(otu)
lib_sizes
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
df_sample <- read.table('~/Documents/UC Berkeley/spring2020/Researches/librarysize/213_soil/213_20180101-114722.txt', header=TRUE, sep='\t')
well_defined <- !grepl('BLANK', df_sample$sample_name)
df_sample <- df_sample %>% filter(well_defined)
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "GMPR")
path_to_data <- "~/Documents/UC Berkeley/spring2020/Researches/librarysize/213_soil/47636_otu_table.biom"
data <- read_biom(path_to_data)
otu <- biom_data(data)
dim(otu) # 6099 taxa (rows) and 48 samples (cols)
df_sample <- read.table('~/Documents/UC Berkeley/spring2020/Researches/librarysize/213_soil/213_20180101-114722.txt', header=TRUE, sep='\t')
well_defined <- !grepl('BLANK', df_sample$sample_name)
df_sample <- df_sample %>% filter(well_defined)
# Exploration
lib_sizes <- Matrix::colSums(otu)
summary(lib_sizes)
sample_df <- data.frame(sample_name=colnames(otu), lib_sizes=lib_sizes,
stringsAsFactors=F)
sample_df <- sample_df %>% inner_join(df_sample, by='sample_name')
sample_df <- sample_df[sample_df$lib_sizes < 10000,]
sample_df %>%
group_by(sample_type) %>%
summarize(count=n(), mean=mean(lib_sizes), sd=sd(lib_sizes))
# Adapted from https://github.com/jchen1981/GMPR/blob/master/GMPR.R
GMPR<-function(OTUmatrix, min_ct=2, intersect_no=4){
#datatype check
if(!(class(OTUmatrix) %in% c("data.frame","matrix", "dgCMatrix")))
stop("Unknown datatype of object \"OTUmatrix\".")
rownames(OTUmatrix)->SampleName
if(ncol(OTUmatrix)<nrow(OTUmatrix))
warning("Sample size is larger than OTU number. Check if samples are arranged in columns.")
if(length(OTUmatrix[OTUmatrix<1 & OTUmatrix>0])>=0.1*ncol(OTUmatrix)*nrow(OTUmatrix))
stop("More than 10% values are fractional, please check.")
apply(OTUmatrix, MARGIN = 2, as.integer)->OTUmatrix
gmpr(OTUmatrix,min_ct,intersect_no)->size.factor
names(size.factor)<-SampleName
size.factor[abs(size.factor-1)<1e-10]<-NA
size.factor
}
library(MicrobeDS)
library(dplyr)
library(ggplot2)
library(phyloseq)
library(RColorBrewer)
library("biomformat")
library(GMPR)
path_to_data <- "~/Documents/UC Berkeley/spring2020/Researches/librarysize/213_soil/47636_otu_table.biom"
data <- read_biom(path_to_data)
otu <- biom_data(data)
dim(otu) # 6099 taxa (rows) and 48 samples (cols)
df_sample <- read.table('~/Documents/UC Berkeley/spring2020/Researches/librarysize/213_soil/213_20180101-114722.txt', header=TRUE, sep='\t')
well_defined <- !grepl('BLANK', df_sample$sample_name)
df_sample <- df_sample %>% filter(well_defined)
# Adapted from https://github.com/jchen1981/GMPR/blob/master/GMPR.R
GMPR<-function(OTUmatrix, min_ct=2, intersect_no=4){
#datatype check
if(!(class(OTUmatrix) %in% c("data.frame","matrix", "dgCMatrix")))
stop("Unknown datatype of object \"OTUmatrix\".")
rownames(OTUmatrix)->SampleName
if(ncol(OTUmatrix)<nrow(OTUmatrix))
warning("Sample size is larger than OTU number. Check if samples are arranged in columns.")
if(length(OTUmatrix[OTUmatrix<1 & OTUmatrix>0])>=0.1*ncol(OTUmatrix)*nrow(OTUmatrix))
stop("More than 10% values are fractional, please check.")
apply(OTUmatrix, MARGIN = 2, as.integer)->OTUmatrix
gmpr(OTUmatrix,min_ct,intersect_no)->size.factor
names(size.factor)<-SampleName
size.factor[abs(size.factor-1)<1e-10]<-NA
size.factor
}
get_lib_sizes <- function(otu_table, method = "TSS") {
if (method == "TSS") {
lib_sizes <- Matrix::colSums(otu_table)
} else if (method == "GMPR") {
lib_sizes <- GMPR(t(otu_table))
}
lib_sizes
}
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
sample_df[sample_id_col]=as.factor(colnames(otu))
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "GMPR")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "TSS")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "GMPR")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "GMPR")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "TSS")
otu
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
sample_df[sample_id_col]=as.factor(colnames(otu))
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
sample_df <- sample_df[sample_df$lib_sizes < 20000,]
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "TSS")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "GMPR")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "clay_particle_class", "TSS")
show_plot(otu, df_sample, "sample_name", "env_biome", "TSS")
show_plot(otu, df_sample, "sample_name", "env_biome", "GMPR")
show_plot(otu, df_sample, "sample_name", "env_biome", "TSS")
show_plot(otu, df_sample, "sample_name", "env_biome", "GMPR")
df_sample <- read.table('~/Documents/UC Berkeley/spring2020/Researches/librarysize/213_soil/213_20180101-114722.txt', header=TRUE, sep='\t')
well_defined <- !grepl('BLANK', df_sample$sample_name)
df_sample <- df_sample %>% filter(well_defined)
# Exploration
lib_sizes <- Matrix::colSums(otu)
summary(lib_sizes)
sample_df <- data.frame(sample_name=colnames(otu), lib_sizes=lib_sizes,
stringsAsFactors=F)
sample_df <- sample_df %>% inner_join(df_sample, by='sample_name')
sample_df[sample_df$lib_sizes > 10000,]
sample_df[sample_df$sample_name=="213.KE26",]
sample_df[~sample_df$sample_name=="213.KE26",]
sample_df[sample_df$sample_name!="213.KE26",]
# Create a function to produce kruskal-wallis test result and ggplot
show_plot <- function(otu_table, sample_table, sample_id_col, col, method = "TSS", log = FALSE) {
lib_sizes <- get_lib_sizes(otu_table, method)
sample_df <- data.frame(lib_sizes=lib_sizes)
sample_df[sample_id_col]=as.factor(colnames(otu))
sample_df <- sample_df %>% inner_join(sample_table, by=sample_id_col)
sample_df <- sample_df[sample_df$sample_name!="213.KE26",]
krus_pval = kruskal.test(sample_df$lib_sizes ~ sample_df[,col])$p.value
if (log) {
ggplot(sample_df, aes(x=log(lib_sizes), color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("Log library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
} else {
ggplot(sample_df, aes(x=lib_sizes, color=factor(sample_df[,col]))) +
geom_density() +
labs(title = sprintf("library size(%s) distribution by %s", method, col),
caption = sprintf("p value is: %E", krus_pval),
color = col)
}
}
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "GMPR")
show_plot(otu, df_sample, "sample_name", "env_biome", "TSS")
show_plot(otu, df_sample, "sample_name", "env_biome", "GMPR")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "TSS")
show_plot(otu, df_sample, "sample_name", "carbon_substrate", "GMPR")
show_plot(otu, df_sample, "sample_name", "env_biome", "TSS")
unique(sample_df$env_biome)
